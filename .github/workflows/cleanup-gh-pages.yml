name: Cleanup gh-pages

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 2 * *'  # Run on 2nd day of each month at 3 AM UTC

permissions:
  contents: write

jobs:
  clean-gh-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gh-pages (shallow)
        uses: actions/checkout@v5
        with:
          ref: gh-pages
          fetch-depth: 5  # Start with ~5 days

      - name: Find first commit of current month
        id: find_commit
        run: |
          set -euo pipefail

          # First day of current month
          CURRENT_MONTH_START=$(date +%Y-%m-01)
          echo "Looking for first commit on or after: $CURRENT_MONTH_START"

          # Max 40 commits (~40 days to cover edge cases)
          MAX_COMMITS=40
          FETCHED=5
          FIRST_COMMIT=""

          while [ -z "$FIRST_COMMIT" ] && [ $FETCHED -lt $MAX_COMMITS ]; do
            # Find oldest commit on or after month start
            FIRST_COMMIT=$(git log --reverse --since="$CURRENT_MONTH_START 00:00:00" --format="%H" | head -n 1 || true)

            if [ -n "$FIRST_COMMIT" ]; then
              COMMIT_DATE=$(git show -s --format=%ci "$FIRST_COMMIT")
              echo "✓ Found first commit: $FIRST_COMMIT"
              echo "  Date: $COMMIT_DATE"
              break
            fi

            # Deepen gradually (5 commits at a time = ~5 days)
            echo "No commit found yet, fetching 5 more commits (total: $((FETCHED + 5)))..."
            git fetch --deepen 5 origin gh-pages || true
            FETCHED=$((FETCHED + 5))
          done

          if [ -z "$FIRST_COMMIT" ]; then
            echo "❌ No commits found since $CURRENT_MONTH_START"
            exit 1
          fi

          # Count how many commits we're keeping
          COMMIT_COUNT=$(git log --since="$CURRENT_MONTH_START 00:00:00" --oneline | wc -l)
          echo "Will keep $COMMIT_COUNT commits from current month"

          echo "first_commit=$FIRST_COMMIT" >> $GITHUB_OUTPUT
          echo "month_start=$CURRENT_MONTH_START" >> $GITHUB_OUTPUT
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT

      - name: Create new branch with current month only
        env:
          FIRST_COMMIT: ${{ steps.find_commit.outputs.first_commit }}
          MONTH_START: ${{ steps.find_commit.outputs.month_start }}
          COMMIT_COUNT: ${{ steps.find_commit.outputs.commit_count }}
        run: |
          set -euo pipefail

          echo "Creating new branch from $FIRST_COMMIT onwards..."
          echo "Keeping $COMMIT_COUNT commits since $MONTH_START"

          # Get list of commits to keep (oldest first for proper cherry-picking)
          git log --since="$MONTH_START 00:00:00" --reverse --format="%H" > commits_to_keep.txt

          TOTAL_COMMITS=$(wc -l < commits_to_keep.txt)
          echo "Processing $TOTAL_COMMITS commits..."

          # Create fresh orphan branch from first commit
          FIRST_COMMIT_TO_KEEP=$(head -n 1 commits_to_keep.txt)
          echo "Creating orphan branch from first commit: $FIRST_COMMIT_TO_KEEP"

          git checkout --orphan gh-pages-review "$FIRST_COMMIT_TO_KEEP"

          # Remove all files from index and working directory
          git rm -rf --cached .
          git clean -fdx

          # Cherry-pick remaining commits (skip first one, already checked out)
          if [ "$TOTAL_COMMITS" -gt 1 ]; then
            echo "Cherry-picking remaining commits..."
            tail -n +2 commits_to_keep.txt | while IFS= read -r COMMIT; do
              COMMIT_MSG=$(git log -1 --format="%s" "$COMMIT")
              COMMIT_DATE=$(git log -1 --format="%ci" "$COMMIT")
              echo "  → $COMMIT ($COMMIT_DATE): $COMMIT_MSG"

              git cherry-pick --allow-empty --keep-redundant-commits "$COMMIT" || {
                echo "⚠️  Failed to cherry-pick $COMMIT"
                git cherry-pick --abort || true
                exit 1
              }
            done
          fi

      - name: Verify new branch
        run: |
          set -euo pipefail

          MONTH_START=$(date +%Y-%m-01)
          NEW_COUNT=$(git log --oneline | wc -l)
          OLDEST_DATE=$(git log --reverse --format="%ci" | head -n 1)
          NEWEST_DATE=$(git log --format="%ci" | head -n 1)

          echo "New branch statistics:"
          echo "  Total commits: $NEW_COUNT"
          echo "  Oldest commit: $OLDEST_DATE"
          echo "  Newest commit: $NEWEST_DATE"

          # Verify oldest commit is from current month
          OLDEST_MONTH=$(echo "$OLDEST_DATE" | cut -d'-' -f1,2)
          CURRENT_MONTH=$(date +%Y-%m)

          if [ "$OLDEST_MONTH" != "$CURRENT_MONTH" ]; then
            echo "⚠️  Warning: Oldest commit is from $OLDEST_MONTH, not $CURRENT_MONTH"
          else
            echo "✓ Verification passed: All commits are from $CURRENT_MONTH"
          fi

      - name: Clean up git objects
        run: |
          git reflog expire --all --expire=now
          git gc --prune=now --aggressive

      - name: Show of gh-pages-review
        run: |
          set -euo pipefail
          git log --oneline --graph --decorate -20

      - name: Push review branch
        run: |
          git push --force origin gh-pages-review
