name: Cleanup gh-pages

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  clean-gh-pages:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout gh-pages (shallow)
        uses: actions/checkout@v5
        with:
          ref: gh-pages
          fetch-depth: 7  # small initial depth

      - name: Install git-filter-repo
        run: |
          sudo apt-get update -y
          python3 -m pip install --upgrade --user git-filter-repo
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Find first commit since previous month
        id: find_commit
        run: |
          set -euo pipefail

          # First day of the previous month
          CUTOFF_DATE=$(date -d 'last month' +%Y-%m-01)
          echo "Cutoff date: $CUTOFF_DATE"

          # Since there's one commit per day, 60 commits cover ~2 months
          MAX_COMMITS=60
          FETCHED=0
          FIRST_COMMIT=""

          while [ -z "$FIRST_COMMIT" ] && [ $FETCHED -lt $MAX_COMMITS ]; do
            FIRST_COMMIT=$(git log --reverse --since="$CUTOFF_DATE" --format="%H" | head -n 1 || true)
            if [ -n "$FIRST_COMMIT" ]; then
              break
            fi

            FETCHED=$((FETCHED+10))
            echo "No commit found yet — deepening by 10 commits (total $FETCHED)..."
            git fetch --deepen 10 origin gh-pages || true
          done

          if [ -z "$FIRST_COMMIT" ]; then
            echo "No commits found since $CUTOFF_DATE — aborting."
            exit 1
          fi

          echo "Found first commit since $CUTOFF_DATE: $FIRST_COMMIT"
          echo "first=$FIRST_COMMIT" >> $GITHUB_OUTPUT

      - name: Filter history since cutoff
        run: |
          set -euo pipefail
          CUTOFF_DATE=$(date -d 'last month' +%Y-%m-01)
          echo "Filtering commits since $CUTOFF_DATE"

          # Convert cutoff date to Unix timestamp
          CUTOFF_TS=$(date -d "$CUTOFF_DATE" +%s)
          echo "Cutoff timestamp: $CUTOFF_TS"

          git filter-repo --force --commit-callback "
            import datetime
            cutoff = datetime.datetime.fromtimestamp(int('$CUTOFF_TS'), tz=datetime.timezone.utc)
            commit_dt = datetime.datetime.fromisoformat(commit.committer_date)
            if commit_dt < cutoff:
              commit.skip = True
            "

      - name: Clean up git objects
        run: |
          git reflog expire --all --expire=now
          git gc --prune=now --aggressive

      - name: Push cleaned branch for review
        run: |
          git checkout -B gh-pages-review
          git push --force origin gh-pages-review

      # Uncomment to overwrite the actual gh-pages branch
      # - name: Force push cleaned branch
      #   run: git push --force origin gh-pages
